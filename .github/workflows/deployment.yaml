name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  ECS_CLUSTER: helloworldcluster
  ECS_SERVICE: helloworldservice

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecr-public get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR }}
          docker build -t helloworldrepository:$IMAGE_TAG .
          docker tag helloworldrepository:$IMAGE_TAG ${{ secrets.AWS_ECR }}/helloworldrepository:$IMAGE_TAG
          docker push ${{ secrets.AWS_ECR }}/helloworldrepository:$IMAGE_TAG
          echo "::set-output name=image::${{ secrets.AWS_ECR }}/helloworldrepository:$IMAGE_TAG"
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition helloworldtask \
          --query taskDefinition > task-definition.json
        
      - name: Read task-definition.json
        run: cat task-definition.json

      - name: Update task-definition.json
        run: echo "`jq '.containerDefinitions[0].image="${{ steps.build-image.outputs.image }}"' task-definition.json`" > task-definition.json

      - name: Read task-definition.json
        run: cat task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
      - name: Force redeploy
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --region ${{ secrets.AWS_REGION }} --force-new-deployment
      

